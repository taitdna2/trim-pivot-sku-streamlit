# app.py  ‚Äî  Trim (2 ch·∫ø ƒë·ªô) + Pivot SKU theo Kh√°ch h√†ng
import os
from io import BytesIO
from collections import Counter
from typing import Optional

import pandas as pd
import streamlit as st

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# C·∫•u h√¨nh trang
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
st.set_page_config(page_title="C·∫ÆT & PIVOT SKU", layout="wide")
st.title("‚úÇÔ∏è C·∫ÆT FILE & üìä PIVOT S·∫¢N L∆Ø·ª¢NG/DOANH S·ªê THEO KH√ÅCH H√ÄNG")
st.caption("Hai ch·∫ø ƒë·ªô: (1) Tr·ª±c ti·∫øp ‚â§200‚ÄØMB  ‚Ä¢  (2) Ngo·∫°i tuy·∫øn >200‚ÄØMB")

# C·ªôt c·∫ßn l·∫•y (theo ch·ªØ c√°i Excel)
USECOLS_LETTERS = "D,L,M,Q,R,S,W,Z"
REQUIRED = [
    "T√™n NPP", "M√£ KH", "T√™n KH", "Nh√≥m h√†ng",
    "M√£ SP", "T√™n SP", "T·ªïng S·∫£n l∆∞·ª£ng (L·∫ª)", "Doanh s·ªë b√°n"
]
INDEX_TO_REQUIRED = {
    0: "T√™n NPP",
    1: "M√£ KH",
    2: "T√™n KH",
    3: "Nh√≥m h√†ng",
    4: "M√£ SP",
    5: "T√™n SP",
    6: "T·ªïng S·∫£n l∆∞·ª£ng (L·∫ª)",
    7: "Doanh s·ªë b√°n",
}

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# Helpers chung
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def _mode_text(series):
    vals = [str(x).strip() for x in series if str(x).strip() and str(x).strip().lower() != "nan"]
    if not vals:
        return ""
    cnt = Counter(vals)
    mx = max(cnt.values())
    return sorted([v for v, c in cnt.items() if c == mx])[0]

def normalize_after_cut(df: pd.DataFrame, header_row_user: int) -> pd.DataFrame:
    """Chu·∫©n ho√° t√™n c·ªôt & ki·ªÉu d·ªØ li·ªáu sau khi c·∫Øt."""
    if header_row_user != 1:
        buf = BytesIO()
        df.to_excel(buf, index=False, header=False)
        buf.seek(0)
        df = pd.read_excel(buf, header=header_row_user - 1, engine="openpyxl")

    df.columns = [str(c).strip() for c in df.columns]

    # map theo v·ªã tr√≠
    ren = {}
    for i, c in enumerate(df.columns[:len(INDEX_TO_REQUIRED)]):
        target = INDEX_TO_REQUIRED.get(i)
        if target:
            ren[c] = target
    df = df.rename(columns=ren)

    # ƒë·∫£m b·∫£o ƒë·ªß c·ªôt
    for c in REQUIRED:
        if c not in df.columns:
            df[c] = None
    df = df[REQUIRED].copy()

    # ki·ªÉu s·ªë
    df["T·ªïng S·∫£n l∆∞·ª£ng (L·∫ª)"] = pd.to_numeric(df["T·ªïng S·∫£n l∆∞·ª£ng (L·∫ª)"], errors="coerce").fillna(0)
    df["Doanh s·ªë b√°n"] = pd.to_numeric(df["Doanh s·ªë b√°n"], errors="coerce").fillna(0)

    # chu·∫©n chu·ªói
    for c in ["T√™n NPP", "M√£ KH", "T√™n KH", "Nh√≥m h√†ng", "M√£ SP", "T√™n SP"]:
        df[c] = df[c].astype(str).str.strip()

    return df

def build_pivot_by_customer(df: pd.DataFrame) -> pd.DataFrame:
    rep = (
        df.groupby("M√£ KH")
          .agg(**{
              "T√™n KH ƒë·∫°i di·ªán": ("T√™n KH", _mode_text),
              "T√™n NPP ƒë·∫°i di·ªán": ("T√™n NPP", _mode_text),
          }).reset_index()
    )
    qty = pd.pivot_table(
        df, index=["M√£ KH"], columns="T√™n SP",
        values="T·ªïng S·∫£n l∆∞·ª£ng (L·∫ª)", aggfunc="sum", fill_value=0, observed=False
    )
    revenue = df.groupby("M√£ KH", as_index=True)["Doanh s·ªë b√°n"].sum().to_frame("T·ªïng Doanh s·ªë")

    out = rep.set_index("M√£ KH").join(qty, how="right").join(revenue, how="left").reset_index()

    fixed = ["M√£ KH", "T√™n KH ƒë·∫°i di·ªán", "T√™n NPP ƒë·∫°i di·ªán"]
    cols = out.columns.tolist()
    dynamic = [c for c in cols if c not in fixed and c != "T·ªïng Doanh s·ªë"]
    if "T·ªïng Doanh s·ªë" in cols: dynamic.append("T·ªïng Doanh s·ªë")
    return out[fixed + dynamic]

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# C·∫ÆT: 2 ph∆∞∆°ng √°n
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def cut_pandas_usecols(file_bytes: bytes, sheet_name: Optional[str]) -> bytes:
    """
    NHANH (‚â§200MB): ch·ªâ ƒë·ªçc ƒë√∫ng 8 c·ªôt b·∫±ng pandas `usecols="D,L,M,Q,R,S,W,Z"`.
    """
    bio = BytesIO(file_bytes)
    xls = pd.ExcelFile(bio, engine="openpyxl")
    real_sheet = sheet_name if (sheet_name and sheet_name in xls.sheet_names) else xls.sheet_names[0]

    df_cut = pd.read_excel(
        xls, sheet_name=real_sheet, engine="openpyxl",
        dtype=object, keep_default_na=False, usecols=USECOLS_LETTERS
    )
    out = BytesIO()
    with pd.ExcelWriter(out, engine="openpyxl") as w:
        df_cut.to_excel(w, index=False, sheet_name="Trimmed")
    return out.getvalue()

def cut_openpyxl_streaming(file_bytes: bytes, sheet_name: Optional[str]) -> bytes:
    """
    SI√äU TI·∫æT KI·ªÜM RAM: ƒë·ªçc/ghi streaming b·∫±ng openpyxl (t·ª´ng h√†ng).
    """
    from openpyxl import load_workbook, Workbook
    from openpyxl.utils import column_index_from_string

    idxs = [column_index_from_string(c) for c in USECOLS_LETTERS.split(",")]  # 1-based

    wb_in = load_workbook(BytesIO(file_bytes), read_only=True, data_only=True)
    ws_in = wb_in[sheet_name] if (sheet_name and sheet_name in wb_in.sheetnames) else wb_in.active

    wb_out = Workbook(write_only=True)
    ws_out = wb_out.create_sheet(title="Trimmed")

    for row in ws_in.iter_rows(values_only=True):
        out_row = []
        for i in idxs:
            v = row[i-1] if (i-1) < len(row) else None
            out_row.append(v)
        ws_out.append(out_row)

    buf = BytesIO()
    wb_out.save(buf)  # save() cho write_only workbook
    return buf.getvalue()

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# UI: Hai lu·ªìng x·ª≠ l√Ω
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
tab_small, tab_big = st.tabs(["üîπ Tr·ª±c ti·∫øp (‚â§ 200‚ÄØMB)", "üî∏ Ngo·∫°i tuy·∫øn (> 200‚ÄØMB)"])

# ---------- TAB 1: TR·ª∞C TI·∫æP ----------
with tab_small:
    st.subheader("B∆∞·ªõc 1 ‚Äî C·∫ÆT c·ªôt tr·ª±c ti·∫øp (‚â§200‚ÄØMB)")
    c1, c2 = st.columns([2,1])
    with c1:
        raw_file = st.file_uploader(
            "Upload file Excel G·ªêC (xlsx/xlsm; n·∫øu xls/xlsb h√£y Save As ‚Üí .xlsx tr∆∞·ªõc)",
            type=["xlsx", "xlsm", "xls"], key="raw_small"
        )
    with c2:
        sheet_name = None
        if raw_file:
            try:
                xls = pd.ExcelFile(raw_file, engine="openpyxl")
                sheet_name = st.selectbox("Ch·ªçn sheet", xls.sheet_names, key="sheet_small")
            except Exception as e:
                st.warning(f"Kh√¥ng ƒë·ªçc ƒë∆∞·ª£c danh s√°ch sheet (s·∫Ω d√πng sheet ƒë·∫ßu ti√™n). Chi ti·∫øt: {e}")
                sheet_name = None

    mode = st.radio(
        "C√°ch c·∫Øt:",
        ["Nhanh (pandas)", "Si√™u ti·∫øt ki·ªám RAM (openpyxl streaming)"],
        horizontal=True, key="mode_small"
    )

    if raw_file and st.button("‚úÇÔ∏è C·∫ÆT NGAY", use_container_width=True, key="cut_small_btn"):
        try:
            with st.spinner("ƒêang c·∫Øt..."):
                if mode.startswith("Nhanh"):
                    trimmed = cut_pandas_usecols(raw_file.getvalue(), sheet_name)
                else:
                    trimmed = cut_openpyxl_streaming(raw_file.getvalue(), sheet_name)
            st.session_state["trimmed_bytes"] = trimmed
            st.success("‚úÖ ƒê√£ c·∫Øt xong.")
            st.download_button(
                "‚¨áÔ∏è T·∫£i file ƒë√£ c·∫Øt (.xlsx)",
                data=trimmed,
                file_name=f"{os.path.splitext(raw_file.name)[0]}_trimmed.xlsx",
                mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                use_container_width=True,
                key="dl_trim_small",
            )
        except Exception as e:
            st.error(f"L·ªói khi c·∫Øt: {e}")

    st.markdown("---")
    st.subheader("B∆∞·ªõc 2 ‚Äî Pivot theo Kh√°ch H√†ng")

    source_choice = st.radio(
        "Ngu·ªìn file pivot:",
        ["D√πng file ƒë√£ c·∫Øt ·ªü B∆∞·ªõc 1", "Upload file ƒë√£ c·∫Øt (8 c·ªôt)"],
        horizontal=True, key="src_small"
    )
    trimmed_to_use = None
    if source_choice.startswith("D√πng"):
        if "trimmed_bytes" in st.session_state:
            trimmed_to_use = st.session_state["trimmed_bytes"]
        else:
            st.info("Ch∆∞a c√≥ file ƒë√£ c·∫Øt trong session. H√£y c·∫Øt ·ªü tr√™n ho·∫∑c chuy·ªÉn sang ‚ÄòUpload file ƒë√£ c·∫Øt‚Äô.")
    else:
        up2 = st.file_uploader("Upload file ƒë√£ c·∫Øt (8 c·ªôt)", type=["xlsx"], key="trimmed_small")
        if up2:
            trimmed_to_use = up2.getvalue()

    header_row = st.number_input("D√≤ng ti√™u ƒë·ªÅ (1 = d√≤ng ƒë·∫ßu)", min_value=1, value=1, step=1, key="hdr_small")

    if trimmed_to_use and st.button("üöÄ PIVOT NGAY", use_container_width=True, key="pivot_small_btn"):
        try:
            with st.spinner("ƒêang ƒë·ªçc & chu·∫©n ho√°..."):
                df_cut = pd.read_excel(BytesIO(trimmed_to_use), header=0, engine="openpyxl")
                df_norm = normalize_after_cut(df_cut, header_row_user=header_row)

                miss = [c for c in REQUIRED if c not in df_norm.columns]
                if miss:
                    st.error(f"Thi·∫øu c·ªôt b·∫Øt bu·ªôc: {miss}")
                    st.stop()

            with st.spinner("ƒêang pivot..."):
                pivot_df = build_pivot_by_customer(df_norm)

            st.success("‚úÖ Xong!")
            st.dataframe(pivot_df, use_container_width=True)

            out = BytesIO()
            with pd.ExcelWriter(out, engine="openpyxl") as w:
                pivot_df.to_excel(w, index=False, sheet_name="PIVOT_KH")
            st.download_button(
                "‚¨áÔ∏è T·∫£i Excel PIVOT",
                data=out.getvalue(),
                file_name="pivot_sku_theo_khachhang.xlsx",
                mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                use_container_width=True,
                key="dl_pivot_small",
            )
        except Exception as e:
            st.error(f"L·ªói pivot: {e}")

# ---------- TAB 2: NGO·∫†I TUY·∫æN ----------
with tab_big:
    st.subheader("Khi file g·ªëc > 200‚ÄØMB (kh√¥ng upload ƒë∆∞·ª£c)")
    st.markdown(
        """
        **C√°ch l√†m:**
        1) T·∫£i script c·∫Øt **ngo·∫°i tuy·∫øn** (d√πng openpyxl streaming).
        2) Ch·∫°y script tr√™n m√°y: ch·ªçn file g·ªëc & sheet ‚Üí script t·∫°o file **_trimmed.xlsx** (ch·ªâ 8 c·ªôt).
        3) Quay l·∫°i tab **Tr·ª±c ti·∫øp** ho·∫∑c ph·∫ßn d∆∞·ªõi ƒë√¢y ƒë·ªÉ **Upload file ƒë√£ c·∫Øt** v√† Pivot.

        **Y√™u c·∫ßu Python c·ª•c b·ªô:** `pip install openpyxl`
        """
    )

    # N·ªôi dung script ngo·∫°i tuy·∫øn:
    offline_script = f"""# cutter_offline.py - C·∫Øt 8 c·ªôt (D,L,M,Q,R,S,W,Z) b·∫±ng streaming
from io import BytesIO
from openpyxl import load_workbook, Workbook
from openpyxl.utils import column_index_from_string
import os

USECOLS = "{USECOLS_LETTERS}".split(",")

def cut_streaming(path_in: str, sheet_name: str = None) -> str:
    idxs = [column_index_from_string(c) for c in USECOLS]
    with open(path_in, "rb") as f:
        data = f.read()

    wb_in = load_workbook(BytesIO(data), read_only=True, data_only=True)
    ws_in = wb_in[sheet_name] if (sheet_name and sheet_name in wb_in.sheetnames) else wb_in.active

    wb_out = Workbook(write_only=True)
    ws_out = wb_out.create_sheet(title="Trimmed")

    for row in ws_in.iter_rows(values_only=True):
        out_row = []
        for i in idxs:
            v = row[i-1] if (i-1) < len(row) else None
            out_row.append(v)
        ws_out.append(out_row)

    out_path = os.path.splitext(path_in)[0] + "_trimmed.xlsx"
    wb_out.save(out_path)
    return out_path

if __name__ == "__main__":
    path = input("ƒê∆∞·ªùng d·∫´n file Excel g·ªëc (.xlsx): ").strip().strip('"')
    sheet = input("T√™n sheet (Enter = sheet ƒë·∫ßu ti√™n): ").strip() or None
    out = cut_streaming(path, sheet)
    print("ƒê√£ xu·∫•t:", out)
"""

    # Cho t·∫£i script
    st.download_button(
        "‚¨áÔ∏è T·∫£i script c·∫Øt ngo·∫°i tuy·∫øn (cutter_offline.py)",
        data=offline_script.encode("utf-8"),
        file_name="cutter_offline.py",
        mime="text/x-python",
        use_container_width=True,
        key="dl_offline_script",
    )

    st.markdown("---")
    st.subheader("Pivot ngay t·ª´ file ƒë√£ c·∫Øt (upload ·ªü ƒë√¢y)")
    up_big = st.file_uploader("Upload file *_trimmed.xlsx", type=["xlsx"], key="trimmed_big")
    header_row_big = st.number_input("D√≤ng ti√™u ƒë·ªÅ (1 = d√≤ng ƒë·∫ßu)", min_value=1, value=1, step=1, key="hdr_big")

    if up_big and st.button("üöÄ PIVOT (file ƒë√£ c·∫Øt)", use_container_width=True, key="pivot_big_btn"):
        try:
            df_cut = pd.read_excel(up_big, header=0, engine="openpyxl")
            df_norm = normalize_after_cut(df_cut, header_row_user=header_row_big)
            miss = [c for c in REQUIRED if c not in df_norm.columns]
            if miss:
                st.error(f"Thi·∫øu c·ªôt b·∫Øt bu·ªôc: {miss}")
                st.stop()
            pivot_df = build_pivot_by_customer(df_norm)

            st.success("‚úÖ Xong!")
            st.dataframe(pivot_df, use_container_width=True)

            out = BytesIO()
            with pd.ExcelWriter(out, engine="openpyxl") as w:
                pivot_df.to_excel(w, index=False, sheet_name="PIVOT_KH")
            st.download_button(
                "‚¨áÔ∏è T·∫£i Excel PIVOT",
                data=out.getvalue(),
                file_name="pivot_sku_theo_khachhang.xlsx",
                mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                use_container_width=True,
                key="dl_pivot_big",
            )
        except Exception as e:
            st.error(f"L·ªói pivot: {e}")
